{"version":3,"sources":["route.js"],"names":["define","langx","spa","router","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","forceRefresh","data","self","forEach","eventName","isFunction","on","_entering","ctx","force","_prepared","prepare","getConfigData","key","getNamedValue","window","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","require","type","resolve","then","e","createEvent","route","result","trigger","when","render","context","perform"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,QACA,YACD,SAASC,EAAOC,EAAIC,GACnB,IAAIC,EAAWH,EAAMG,SAEjBC,EAAQF,EAAOE,MAAQF,EAAOE,MAAMC,QAAQ,CAC5CC,UAAW,WAEXC,KAAM,SAASC,EAAMC,GACjBC,KAAKC,UAAUH,EAAMC,CAAO,EAC5BC,KAAKE,QAAUH,EAAQG,QACvBF,KAAKG,aAAeJ,EAAQI,aAC5BH,KAAKI,KAAOL,EAAQK,KAEpB,IAAIC,EAAOL,KACX,CAAC,YAAa,YAAa,YAAYM,QAAQ,SAASC,GAChDjB,EAAMkB,WAAWT,EAAQQ,EAAU,GACnCF,EAAKI,GAAGF,EAAWR,EAAQQ,EAAU,CAE7C,CAAC,CACL,EAEAG,UAAW,SAASC,GAChB,OAAIX,KAAKG,cAAgBQ,EAAIC,OAAS,CAACZ,KAAKa,UACjCb,KAAKc,QAAQ,EAEjBd,IACX,EAEAe,cAAe,SAASC,GACpB,OAAOA,EAAMhB,KAAKI,KAAKY,GAAOhB,KAAKI,IACvC,EAEAa,cAAe,WACX,OAAOC,OAAOC,SAASC,SAASC,MAAMrB,KAAKsB,KAAK,CACpD,EAEAR,QAAS,WACL,IAAIS,EAAI,IAAI9B,EACRM,EAAUC,KAAKwB,SACfC,EAAoB1B,EAAQ2B,WAG5BrB,GAFaL,KAAK0B,WAEX1B,MACGD,EAAQG,QACJH,EAAQ4B,YAO1B,OALAC,QAAQ,CAACH,EAAkBI,MAAO,SAASA,GAC1BxB,EAAKqB,WAAa,IAAIG,EAAKJ,CAAiB,EACzDF,EAAEO,QAAQ,CACd,CAAC,EAEMP,EAAEQ,KAAK,WACV,IAAIC,EAAI1C,EAAM2C,YAAY,YAAa,CACnCC,MAAO7B,EACP8B,OAAQ,CAAA,CACZ,CAAC,EAED,OADA9B,EAAK+B,QAAQJ,CAAC,EACPvC,EAAS4C,KAAKL,EAAEG,MAAM,EAAEJ,KAAK,WAChC1B,EAAKQ,UAAY,CAAA,CACrB,CAAC,CACL,CAAC,CACL,EAEAyB,OAAQ,SAAS3B,GACTqB,EAAI1C,EAAM2C,YAAY,YAAa,CACnCC,MAAOlC,KACPuC,QAAS5B,EACTT,QAASF,KAAKE,OAClB,CAAC,EAED,OADAF,KAAKoC,QAAQJ,CAAC,EACPA,EAAE9B,OACb,EAEAkC,QAAS,SAASJ,GACd,IAAIN,EAAa1B,KAAK0B,WACtB,OAAIA,EACOA,EAAWc,QAAQR,CAAC,EAEpBhC,KAAKC,UAAU+B,CAAC,CAE/B,CACJ,CAAC,EAED,OAAOzC,EAAIG,MAAQA,CACvB,CAAC","file":"../route.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./spa\",\r\n    \"./router\"\r\n], function(langx, spa,router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.forceRefresh = setting.forceRefresh;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (this.forceRefresh || ctx.force || !this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        getNamedValue: function() {\r\n            return window.location.pathname.match(this.regex);\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = langx.createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = langx.createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    return spa.Route = Route;;\r\n});\r\n"]}