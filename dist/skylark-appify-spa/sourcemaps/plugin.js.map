{"version":3,"sources":["plugin.js"],"names":["define","langx","spa","router","Deferred","Plugin","Evented","inherit","klassName","init","name","setting","this","isString","hookers","split","_setting","isHooked","eventName","indexOf","prepare","controller","d","controllerSetting","self","require","type","on","plugin","proxy","perform","resolve","then","e","createEvent","result","trigger","when","_prepared","overrided"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,QACA,YACD,SAASC,EAAOC,EAAKC,GACpB,IAAIC,EAAWH,EAAMG,SAEjBC,EAASJ,EAAMK,QAAQC,QAAQ,CAC/BC,UAAW,YAEXC,KAAM,SAASC,EAAMC,GACjBC,KAAKF,KAAOA,EAERT,EAAMY,SAASF,EAAQG,OAAO,IAC9BH,EAAQG,QAAUH,EAAQG,QAAQC,MAAM,GAAG,GAE/CH,KAAKI,SAAWL,CACpB,EAEAM,SAAU,SAASC,GAEf,MAAoC,CAAC,GADvBN,KAAKI,SAASF,SAAW,IACxBK,QAAQD,CAAS,CACpC,EAEAE,QAAS,WACL,IAGIC,EAHAC,EAAI,IAAIlB,EACRO,EAAUC,KAAKI,SACfO,EAAoBZ,EAAQU,WAE5BG,GADaZ,KAAKS,WACXT,MAQX,OAPAa,QAAQ,CAACF,EAAkBG,MAAO,SAASA,GACvCL,EAAaG,EAAKH,WAAa,IAAIK,EAAKH,CAAiB,EACzDpB,EAAOwB,GAAGhB,EAAQG,QAAS,CACvBc,OAAQJ,CACZ,EAAGvB,EAAM4B,MAAMR,EAAWS,QAAST,CAAU,CAAC,EAC9CC,EAAES,QAAQ,CACd,CAAC,EACMT,EAAEU,KAAK,WACV,IAAIC,EAAIhC,EAAMiC,YAAY,YAAa,CACnCN,OAAQJ,EACRW,OAAQ,CAAA,CACZ,CAAC,EAED,OADAX,EAAKY,QAAQH,CAAC,EACP7B,EAASiC,KAAKJ,EAAEE,MAAM,EAAEH,KAAK,WAChCR,EAAKc,UAAY,CAAA,CACrB,CAAC,CACL,CAAC,CACL,EAEAF,QAAS,SAASH,GACd,IAAIZ,EAAaT,KAAKS,WACtB,OAAIA,EACOA,EAAWS,QAAQG,CAAC,EAEpBrB,KAAK2B,UAAUN,CAAC,CAE/B,CACJ,CAAC,EAED,OAAO/B,EAAIG,OAASA,CACxB,CAAC","file":"../plugin.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./spa\",\r\n    \"./router\"\r\n], function(langx, spa, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked: function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = langx.createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    return spa.Plugin = Plugin;\r\n});\r\n"]}