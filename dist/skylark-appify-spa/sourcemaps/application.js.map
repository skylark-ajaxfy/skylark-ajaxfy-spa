{"version":3,"sources":["application.js"],"names":["define","langx","spa","router","Deferred","Application","Evented","inherit","klassName","init","config","plugins","this","_plugins","baseUrl","_config","mixin","each","pluginName","setting","Plugin","routes","_router","_page","Page","page","document","title","undefined","URL","baseURI","pathname","homePath","getConfig","key","go","path","force","prepare","self","promises0","_prepared","resolve","map","plugin","name","isHooked","all","then","trigger","createEvent","promises1","route","lazy","promises2","concat","run","start"],"mappings":";;;;;;;AAAAA,OAAO,CACH,sBACA,QACA,YACD,SAASC,EAAOC,EAAIC,GACnB,IAAIC,EAAWH,EAAMG,SAGjBC,EAAcJ,EAAMK,QAAQC,QAAQ,CACpCC,UAAW,iBAEXC,KAAM,SAASC,GAEX,IAAIC,EAAUC,KAAKC,SAAW,GAiB1BC,GAfJJ,EAASE,KAAKG,QAAUd,EAAMe,MAAM,CAChCL,QAAS,EACb,EAAGD,EAAQ,CAAA,CAAI,EAEfT,EAAMgB,KAAKP,EAAOC,QAAS,SAASO,EAAYC,GAC5CR,EAAQO,GAAc,IAAIhB,EAAIkB,OAAOF,EAAYC,CAAO,CAC5D,CAAC,EAEDhB,EAAOkB,OAAOX,EAAOW,MAAM,EAE3BT,KAAKU,QAAUnB,EAEfS,KAAKW,MAAQ,IAAIrB,EAAIsB,KAAKd,EAAOe,IAAI,EAErCC,SAASC,MAAQjB,EAAOiB,MACVjB,EAAOI,SACLc,KAAAA,IAAZd,IACAA,EAAUJ,EAAOI,QAAU,IAAKb,EAAM4B,IAAIH,SAASI,OAAQ,EAAEC,UAEjE5B,EAAOW,QAAQA,CAAO,EAElBJ,EAAOsB,UACP7B,EAAO6B,SAAStB,EAAOsB,QAAQ,CAGvC,EAEAlB,QAAU,WACN,OAAOX,EAAOW,QAAQ,CAC1B,EAEAmB,UAAW,SAASC,GAChB,OAAOA,EAAMtB,KAAKG,QAAQmB,GAAOtB,KAAKG,OAC1C,EAEAoB,GAAI,SAASC,EAAMC,GAEf,OADAlC,EAAOgC,GAAGC,EAAMC,CAAK,EACdzB,IACX,EAEAa,KAAM,WACF,OAAOb,KAAKW,KAChB,EAEAe,QAAS,WACL,IAGIC,EAEAC,EALJ,OAAI5B,KAAK6B,UACErC,EAASsC,QAAQ,GAIxBF,EAAYvC,EAAM0C,KAFlBJ,EAAO3B,MAEoBC,SAAU,SAAS+B,EAAQC,GACtD,GAAID,EAAOE,SAAS,UAAU,EAC1B,OAAOF,EAAON,QAAQ,CAE9B,CAAC,EAEMlC,EAAS2C,IAAIP,CAAS,EAAEQ,KAAK,WAChC7C,EAAO8C,QAAQhD,EAAMiD,YAAY,WAAY,CACzChD,IAAKqC,CACT,CAAC,CAAC,EACF,IAAIY,EAAYlD,EAAM0C,IAAIxC,EAAOkB,OAAO,EAAG,SAAS+B,EAAOP,GACnD,GAAmB,CAAA,IAAfO,EAAMC,KACN,OAAOD,EAAMd,QAAQ,CAE7B,CAAC,EACDgB,EAAYrD,EAAM0C,IAAIJ,EAAK1B,SAAU,SAAS+B,EAAQC,GAClD,GAAI,CAACD,EAAOE,SAAS,UAAU,EAC3B,OAAOF,EAAON,QAAQ,CAE9B,CAAC,EAGL,OAAOlC,EAAS2C,IAAII,EAAUI,OAAOD,CAAS,CAAC,EAAEN,KAAK,WAClDT,EAAKE,UAAY,CAAA,CACrB,CAAC,CACL,CAAC,EACL,EAEAe,IAAK,WACD5C,KAAKU,QAAQmC,MAAM,EACnBtD,EAAO8C,QAAQhD,EAAMiD,YAAY,UAAW,CACxChD,IAAKU,IACT,CAAC,CAAC,CACN,CACJ,CAAC,EAGD,OAAOV,EAAIG,YAAcA,CAC7B,CAAC","file":"../application.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./spa\",\r\n    \"./router\"\r\n], function(langx, spa,router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new spa.Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n        },\r\n\r\n        baseUrl : function() {\r\n            return router.baseUrl();\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path, force) {\r\n            router.go(path, force);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                if (plugin.isHooked(\"starting\")) {\r\n                    return plugin.prepare();\r\n                }\r\n            });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(langx.createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(langx.createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n\r\n    return spa.Application = Application;\r\n});\r\n"]}