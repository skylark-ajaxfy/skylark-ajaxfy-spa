{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","forEach","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","plugin","each","hooker","PluginController","Application","config","plugins","_plugins","_config","pluginName","routes","_page","spa","page","title","baseUrl","undefined","toUrl","homePath","getConfig","go","path","promises1","map","lazy","promises2","all","concat","run","start","window"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-router/router\"\r\n], function(skylark, langx, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type,props) {\r\n        var e = new CustomEvent(type,props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            if (controllerSetting && !controller) {\r\n                require([controllerSetting.type], function(type) {\r\n                    controller = self.controller = new type(controllerSetting);\r\n                    d.resolve();\r\n                });\r\n            } else {\r\n                d.resolve();\r\n            }\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n\r\n                return Deferred.when(e.result).then(function() {\r\n                    router.trigger(createEvent(\"prepared\", {\r\n                        route: self\r\n                    }));\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routing\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            //eventer.trigger(curCtx.route, \"rendered\", {\r\n            //    route: curCtx.route,\r\n            //    node: this._$rvc.domNode\r\n            //});\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n            this._setting = setting;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n\r\n            if (controllerSetting && !controller) {\r\n                require([controllerSetting.type], function(type) {\r\n                    controller = self.controller = new type(controllerSetting);\r\n                    router.on(setting.hookers, {\r\n                        plugin: self\r\n                    }, langx.proxy(controller.perform, controller));\r\n                    d.resolve();\r\n                });\r\n            } else {\r\n                langx.each(setting.hookers, function(eventName, hooker) {\r\n                    router.on(eventName, {\r\n                        plugin: self\r\n                    }, hooker);\r\n                });\r\n                d.resolve();\r\n            }\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl; \r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = require.toUrl(\"\");\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path) {\r\n            router.go(path);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            var self = this;\r\n            var promises1 = langx.map(router.routes(), function(route, name) {\r\n                    if (route.lazy === false) {\r\n                        return route.prepare();\r\n                    }\r\n                }),\r\n                promises2 = langx.map(this._plugins, function(plugin, name) {\r\n                    return plugin.prepare();\r\n                });\r\n\r\n\r\n            return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                return router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n"]}