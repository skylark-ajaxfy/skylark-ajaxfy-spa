{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","forEach","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","split","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","undefined","URL","baseURI","pathname","homePath","getConfig","go","path","promises0","map","all","promises1","lazy","promises2","concat","run","start","window"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-router/router\"\r\n], function(skylark, langx, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked : function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path) {\r\n            router.go(path);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                    if (plugin.isHooked(\"starting\")) {\r\n                        return plugin.prepare();\r\n                    }\r\n                });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n"]}