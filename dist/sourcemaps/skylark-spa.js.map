{"version":3,"sources":["skylark-spa.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","resolved","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","d","_setting","controllerSetting","controller","contentPath","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","undefined","URL","baseURI","pathname","homePath","getConfig","go","path","promises0","all","promises1","lazy","promises2","concat","run","start","main"],"mappings":";;;;;;;CAAA,SAAUA,EAAQC,GAQd,QAASC,GAASC,EAAUC,GACxB,GAAkB,MAAdD,EAAS,GACX,MAAOA,EAET,IAAIE,GAAQD,EAAKE,MAAM,KACnBC,EAAQJ,EAASG,MAAM,IAC3BD,GAAMG,KACN,KAAK,GAAIC,GAAE,EAAGA,EAAEF,EAAMG,OAAQD,IACV,KAAZF,EAAME,KAEM,MAAZF,EAAME,GACNJ,EAAMG,MAENH,EAAMM,KAAKJ,EAAME,IAEzB,OAAOJ,GAAMO,KAAK,KAtBxB,GAAIC,GAASZ,EAAQY,OACjBC,EAAUb,EAAQa,QAClBC,EAA2B,kBAAXF,IAAyBA,EAAOG,IAChDC,GAAUF,GAA4B,mBAAZG,QAE9B,KAAKH,IAAUF,EAAQ,CACrB,GAAIM,KAkBJN,GAASZ,EAAQY,OAAS,SAASO,EAAIC,EAAMrB,GACnB,kBAAXA,IACPmB,EAAIC,IACApB,QAASA,EACTqB,KAAMA,EAAKF,IAAI,SAASG,GACtB,MAAOpB,GAASoB,EAAIF,KAEtBF,QAAS,MAEbJ,EAAQM,IAERG,SAASH,GAAMpB,GAGvBc,EAAUb,EAAQa,QAAU,SAASM,GACjC,IAAKD,EAAIK,eAAeJ,GACpB,KAAM,IAAIK,OAAM,UAAYL,EAAK,wBAErC,IAAIM,GAASP,EAAIC,EACjB,KAAKM,EAAOR,QAAS,CACjB,GAAIS,KAEJD,GAAOL,KAAKO,QAAQ,SAASN,GACzBK,EAAKhB,KAAKG,EAAQQ,MAGtBI,EAAOR,QAAUQ,EAAO1B,QAAQ6B,MAAMC,OAAQH,GAElD,MAAOD,GAAOR,SAIpB,IAAKL,EACF,KAAM,IAAIY,OAAM,qEAKnB,IAFAzB,EAAQa,EAAOC,GAEXC,EACFF,GACE,eACA,SAASkB,GACT,MAAOA,SAEJ,CACL,GAAIA,GAAYjB,EAAQ,mBAEpBG,GACFC,QAAUa,EAEV9B,EAAQ8B,UAAYA,IAIvB,SAASlB,EAAOC,GA/EnBD,EAAA,mBACA,wBACA,sBACA,yBACA,SAAAmB,EAAAC,EAAAC,GAGA,QAAAC,GAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAC,aAAAH,EAAAC,EACA,OAAAJ,GAAAO,UAAAF,EAAAD,GAJA,GA4SAI,GA5SAC,EAAAT,EAAAS,SAOAC,EAAAT,EAAAS,MAAAT,EAAAS,MAAAC,SACAC,UAAA,WAEAC,KAAA,SAAAC,EAAAC,GACAC,KAAAC,UAAAH,EAAAC,GACAC,KAAAE,QAAAH,EAAAG,QACAF,KAAAG,KAAAJ,EAAAI,IAEA,IAAAC,GAAAJ,MACA,YAAA,YAAA,YAAArB,QAAA,SAAA0B,GACArB,EAAAsB,WAAAP,EAAAM,KACAD,EAAAG,GAAAF,EAAAN,EAAAM,OAKAG,UAAA,SAAAC,GACA,MAAAT,MAAAU,UAGAV,KAFAA,KAAAW,WAKAC,cAAA,SAAAC,GACA,MAAAA,GAAAb,KAAAG,KAAAU,GAAAb,KAAAG,MAGAQ,QAAA,WACA,GAAAG,GAAA,GAAArB,GACAM,EAAAC,KAAAe,SACAC,EAAAjB,EAAAkB,WACAA,EAAAjB,KAAAiB,WAEAb,EAAAJ,IACAD,GAAAG,QACAH,EAAAmB,WAOA,OALArD,IAAAmD,EAAA7B,MAAA,SAAAA,GACA8B,EAAAb,EAAAa,WAAA,GAAA9B,GAAA6B,GACAF,EAAAK,YAGAL,EAAAM,KAAA,WACA,GAAA/B,GAAAH,EAAA,aACAmC,MAAAjB,EACAkB,QAAA,GAGA,OADAlB,GAAAmB,QAAAlC,GACAI,EAAA+B,KAAAnC,EAAAiC,QAAAF,KAAA,WACAhB,EAAAM,WAAA,OAKAe,OAAA,SAAAhB,GACA,GAAApB,GAAAH,EAAA,aACAmC,MAAArB,KACA0B,QAAAjB,EACAP,QAAAF,KAAAE,SAGA,OADAF,MAAAuB,QAAAlC,GACAA,EAAAa,SAGAqB,QAAA,SAAAlC,GACA,GAAA4B,GAAAjB,KAAAiB,UACA,OAAAA,GACAA,EAAAU,QAAAtC,GAEAW,KAAAC,UAAAZ,MAKAuC,EAAA5C,EAAA6C,QAAAlC,SACAC,UAAA,qBAEAC,KAAA,SAAAwB,EAAAtB,GACAA,EAAAA,MACAC,KAAAE,QAAAH,EAAAG,QACAF,KAAAG,KAAAJ,EAAAI,MAGAS,cAAA,SAAAC,GACA,MAAAA,GAAAb,KAAAG,KAAAU,GAAAb,KAAAG,MAGAwB,QAAA,SAAAtC,GACA,GAAAgB,GAAAhB,EAAAF,IACA,IAAAa,KAAAK,GACA,MAAAL,MAAAK,GAAAyB,KAAA9B,KAAAX,MAMA0C,EAAA/C,EAAA6C,QAAAlC,SACAC,UAAA,UAEAC,KAAA,SAAAmC,GACAA,EAAAhD,EAAAiD,OACAC,YAAA,QACAF,GAEAhC,KAAAmC,QAAAH,EACAhC,KAAAoC,KAAAC,SAAAC,cAAAN,EAAAE,aACAlC,KAAAuC,QAAAtD,EAEAA,EAAAsB,GAAA,SAAAvB,EAAAwD,MAAAxC,KAAA,aAGAW,QAAA,aAKA8B,QAAA,WACA,GAAAC,GAAAzD,EAAA0D,UAEAzC,GADAjB,EAAA2D,WACAF,EAAArB,MAAAI,OAAAiB,GACA1D,GAAA6D,SAAA3C,GACAF,KAAAoC,KAAAU,UAAA5C,GAEAF,KAAAoC,KAAAU,UAAA,GACA9C,KAAAoC,KAAAW,YAAA7C,IAEAwC,EAAArB,MAAAE,QAAArC,EAAA,YACAmC,MAAAqB,EAAArB,MACAnB,QAAAA,QAKA8C,EAAAhE,EAAA6C,QAAAlC,SACAC,UAAA,YAEAC,KAAA,SAAAC,EAAAC,GACAC,KAAAF,KAAAA,EAEAd,EAAA6D,SAAA9C,EAAAkD,WACAlD,EAAAkD,QAAAlD,EAAAkD,QAAA5F,MAAA,MAEA2C,KAAAe,SAAAhB,GAGAmD,SAAA,SAAA7C,GACA,GAAA4C,GAAAjD,KAAAe,SAAAkC,WACA,OAAAA,GAAAE,QAAA9C,OAGAM,QAAA,WACA,GAAAG,GAAA,GAAArB,GACAM,EAAAC,KAAAe,SACAC,EAAAjB,EAAAkB,WACAA,EAAAjB,KAAAiB,WACAb,EAAAJ,IAQA,OAPAnC,IAAAmD,EAAA7B,MAAA,SAAAA,GACA8B,EAAAb,EAAAa,WAAA,GAAA9B,GAAA6B,GACA/B,EAAAsB,GAAAR,EAAAkD,SACAG,OAAAhD,GACApB,EAAAwD,MAAAvB,EAAAU,QAAAV,IACAH,EAAAK,YAEAL,EAAAM,KAAA,WACA,GAAA/B,GAAAH,EAAA,aACAkE,OAAAhD,EACAkB,QAAA,GAGA,OADAlB,GAAAmB,QAAAlC,GACAI,EAAA+B,KAAAnC,EAAAiC,QAAAF,KAAA,WACAhB,EAAAM,WAAA,OAKAa,QAAA,SAAAlC,GACA,GAAA4B,GAAAjB,KAAAiB,UACA,OAAAA,GACAA,EAAAU,QAAAtC,GAEAW,KAAAC,UAAAZ,MAKAgE,EAAArE,EAAA6C,QAAAlC,SACAC,UAAA,sBAEAC,KAAA,SAAAuD,GACApD,KAAAoD,OAAAA,GAGAzB,QAAA,SAAAtC,GACA,GAAAgB,GAAAhB,EAAAF,IACA,IAAAa,KAAAK,GACA,MAAAL,MAAAK,GAAAyB,KAAA9B,KAAAX,MAMAiE,EAAAtE,EAAA6C,QAAAlC,SACAC,UAAA,iBAEAC,KAAA,SAAA0D,GACA,GAAA/D,EACA,MAAAA,EAEA,IAAAgE,GAAAxD,KAAAyD,WAEAF,GAAAvD,KAAA0D,QAAA1E,EAAAiD,OACAuB,YACAD,GAAA,GAEAvE,EAAA2E,KAAAJ,EAAAC,QAAA,SAAAI,EAAA7D,GACAyD,EAAAI,GAAA,GAAAZ,GAAAY,EAAA7D,KAGAd,EAAA4E,OAAAN,EAAAM,QAEA7D,KAAAuC,QAAAtD,EAEAe,KAAA8D,MAAA,GAAAC,GAAAhC,KAAAwB,EAAAS,MAEA3B,SAAA4B,MAAAV,EAAAU,KACA,IAAAC,GAAAX,EAAAW,OACAC,UAAAD,IACAA,EAAAX,EAAAW,QAAA,GAAAlF,GAAAoF,IAAA/B,SAAAgC,SAAAC,UAEArF,EAAAiF,QAAAA,GAEAX,EAAAgB,UACAtF,EAAAsF,SAAAhB,EAAAgB,UAGA/E,EAAAQ,MAGAwE,UAAA,SAAA3D,GACA,MAAAA,GAAAb,KAAA0D,QAAA7C,GAAAb,KAAA0D,SAGAe,GAAA,SAAAC,GAEA,MADAzF,GAAAwF,GAAAC,GACA1E,MAGAgE,KAAA,WACA,MAAAhE,MAAA8D,OAGAnD,QAAA,WACA,GAAAX,KAAAU,UACA,MAAAjB,GAAA0B,SAEA,IAAAf,GAAAJ,KAEA2E,EAAA3F,EAAAd,IAAA8B,KAAAyD,SAAA,SAAAL,EAAAtD,GACA,GAAAsD,EAAAF,SAAA,YACA,MAAAE,GAAAzC,WAIA,OAAAlB,GAAAmF,IAAAD,GAAAvD,KAAA,WACAnC,EAAAsC,QAAArC,EAAA,YACA6E,IAAA3D,IAEA,IAAAyE,GAAA7F,EAAAd,IAAAe,EAAA4E,SAAA,SAAAxC,EAAAvB,GACA,GAAAuB,EAAAyD,QAAA,EACA,MAAAzD,GAAAV,YAGAoE,EAAA/F,EAAAd,IAAAkC,EAAAqD,SAAA,SAAAL,EAAAtD,GACA,IAAAsD,EAAAF,SAAA,YACA,MAAAE,GAAAzC,WAKA,OAAAlB,GAAAmF,IAAAC,EAAAG,OAAAD,IAAA3D,KAAA,WACAhB,EAAAM,WAAA,OAKAuE,IAAA,WACAjF,KAAAuC,QAAA2C,QACAjG,EAAAsC,QAAArC,EAAA,WACA6E,IAAA/D,WAMA+D,EAAA,SAAAR,GAKA,MAJA/D,KACAX,OAAA0E,EAAAzD,MAAA,OAAAN,EAAA,GAAAuE,GAAAT,YAAAC,IAGA/D,EAgBA,OAbAR,GAAAiD,MAAA8B,GACAT,YAAAA,EAEAvB,KAAAA,EAEAiB,OAAAA,EACAK,iBAAAA,EAEA3D,MAAAA,EACAkC,gBAAAA,IAIA7C,EAAAgF,IAAAA,IAGAnG,EAAA,oBACA,wBACA,SACA,SAAAmB,GACA,MAAAA,KAGAnB,EAAA,eAAA,oBAAA,SAAAuH,GAAA,MAAAA,MAoFEnF","file":"../skylark-spa.js","sourcesContent":["define('skylark-spa/spa',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-router/router\"\r\n], function(skylark, langx, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked : function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path) {\r\n            router.go(path);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                    if (plugin.isHooked(\"starting\")) {\r\n                        return plugin.prepare();\r\n                    }\r\n                });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n\ndefine('skylark-spa/main',[\r\n    \"skylark-langx/skylark\",\r\n    \"./spa\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-spa', ['skylark-spa/main'], function (main) { return main; });\n\n"]}